Argp
לחזור http://www.nongnu.org/c-prog-book/online/c914.html

לחזור http://www.nongnu.org/c-prog-book/online/x843.html
#define SIZE_OF_SQUARE 4
#define MAX(a, b) (a > b ? a : b)
int main(){ 
	for(i = 0; i < SIZE_OF_SQUARE; i++){...
  int cows = 10, sheep = 12;
  printf("we have %d of our most common animal\n", MAX(cows, sheep));


	Struct
struct Person{
    int age;
    char *name;
    int height_in_cm;};

int main(){
  struct Person hero = { 20, "Robin Hood", 191 };
  struct Person john;
  john.age = 31;
  john.name = "John Little";
  john.height_in_cm = 237;
  printf("%s is %d years old and stands %dcm tall in his socks\n",
         john.name, john.age, john.height_in_cm);
  printf( "He is often seen with %s.\n", hero.name );




	Recursive Functions



	Types and Functions
	typedef int BIT16;

enum constants{ITEM_NUM = 3,
                DELT='a'-'A'};

	enum automobile {sedan, pick_up, sport_utility}
		enum automobile  domestic, foreign;
enum automobile {sedan, pick_up, sport_utility} domestic, foreign;

enum automobile {sedan = 60, pick_up = 30, sport_utility = 10};

	Functions
	printf
int printf(const char *format[, argument, ...]);
	int printf(const char *format, ...);



	Functions
	time
time()			-1 if time not awailable on the pc
				//time as integer  1623509415
		#include <time.h>
		time_t time(time_t *timer); // *מיקום של משתנה pointer
localtime()			//time as integer 10623152
		#include <time.h>
		struct tm *localtime(const time_t *timer);
asctime()		//print know time like Thu May 27 16:42:24 2032
		#include <time.h>
		char *asctime(const struct tm *timeptr);
			time_t now;
			asctime(localtime(&now))
	...
double AddDouble(int x, ...){
	va_list arglist;
va_start()
	va_start (arglist, x); //x=4
va_arg()
	va_arg(arglist, double)
va_end()
	va_end (arglist)


Const
const char str[] = "A string constant";
char const *ptr_str = "A string constant"
*ptr_str = `a';     /* It's not allowed here. */


לחזור על extern ו regiser ו volatile
volatile char keyboard_ch; 
int x = 0;         /* a global variable */
extern int y;      /* an allusion to a global variable y */
int main()
{
   extern int z;  /* an allusion to a global variable z */
   int i;         /* a local variable */



לחזור
1:  /* 14L03.c: Using the static specifier */
2:  #include <stdio.h>
3:  /* the add_two function */
4:  int add_two(int x, int y)
5:  {
6:     static int counter = 1;
7:
8:     printf("This is the function call of %d,\n", counter++);
9:     return (x + y);
10: }
11: /* the main function */
12: main()
13: {
14:    int i, j;
15:
16:    for (i=0, j=5; i<5; i++, j--)
17:       printf("the addition of %d and %d is %d.\n\n",
18:              i, j, add_two(i, j));
19:    return 0;
20: }


int add_one() {	//משתנה שמיועד רק לפונקציה!!! לא ניתן לקריאה ממקום אחר
    static int counter = 1; // מוגדר חד פעמי ונשמר לזיכרון
    printf("This is the function call of %d,\n", counter++);
    }		//מעדכן את המונה ב1 כל הרצה


program scope > file scope > function scope > block scope

int x = 1234;         /* program scope */
static int z = 3;         /* file scope */
void function_1(){printf("function x=%i\n",x);}
main(){
	printf("x=%i\n",x); //1234
	int x = 4444; 
	static int y = 2; 
	function_1(); //1234
	printf("x=%i\n",x); //4444
	{int x = 1;
		printf("internal x=%i\n",x); //1
		printf("internal y=%i\n",y); //2
		printf("internal z=%i\n",z); //3
	  y+=10; // static addition
	  z+=10; // static addition

		}
	printf("y=%i\n",y); //12
	printf("z=%i\n",z); //13



	}


 {    /* the beginning of the inner block */
    }   /* the end of the inner block */

int x = 0;        /* program scope */
float y = 0.0;    /* program scope */
int main(){}

start:   /* A goto label has function scope */
   goto  start;  /* the goto statement */



	char str[80];
gets( str );
puts( str );

	char str[80];
	int x, y;
	float z;
scanf("%d  %d", &x, &y);
scanf("%f", &z);
scanf("%s", str);
	printf("%d  %d\n%f\n%s\n", x, y, z, str);

	int sum = 0;
for (int i=1; i<8; i++){
	if ((i==3) || (i==5)) continue;
	sum += i;}
	printf("The sum of 1, 2, 4, 6, and 7 is: %d\n", sum);

while (1) {int c = getc(stdin);
	if (c == `x') break;
		}

switch
			for(char  c=' ';  c != 'x'; ) {
		x=getc(stdin);
	switch (x) {
   		case '1': statement1; break;
   		default: statement-default; break;
			}
				}
if
	if(x)y;
if-else
	if(c1)x;else if(c2) y; else z;
x ? y : z
switch
break
continue
goto

The sin() function
The cos() function
The tan() function
The pow(X,Y) function
The sqrt(X) function

	data types:
signed
unsigned
short
long



Condition
	x ? y : z

Operator	Description
&	The bitwise AND operator
		01 & 11, returns 01
|	The bitwise OR operator
		01 | 11 returns 11
^	The bitwise exclusive OR (XOR) operator
		01 ^ 11 returns 10
~	The bitwise complement operator
		~01 returns 10
>>	The right-shift operator
		x >> y
			x / 2^y
<<	The left-shift operator
		x << y
			x * 2^y
			5 << 1 =10 
&&	The logical AND operator
||	The logical OR operator
!	The logical negation operator



for	while	do while


		קסטינג
(double)x
(float)5		=> 5.0


		1/0
==	Equal to
!=	Not equal to
>	Greater than
<	Less than
>=	Greater than or equal to
<=	Less than or equal to
		1 / 2 + 1 / 2 == 1	==> 0	int 1/2=0
		1.0 / 3.0 + 1.0 / 3.0 + 1.0 / 3.0 == 1.0	==> 0	0.333*3=0.999

+=	Addition assignment operator
-=	Subtraction assignment operator
*=	Multiplication assignment operator
/=	Division assignment operator
%=	Remainder assignment operator
++X
--X
X++
	x=10	y=x++	==> y=10 x=11
X--





void		Type specifier
return		Statement

static		Storage class specifier
const		Storage class modifier

char	1byte
short		Type specifier
int		Type specifier
double		Type specifier
long		Type specifier
float		Type specifier
long long


enum		Type specifier
	enum constansts{false=0, true=1};
register	Storage class specifier
extern		Storage class specifier

struct		Type specifier		multy type array
union		Type specifier
unsigned	Type specifier

volatile	Storage class modifier
signed		Type specifier
goto		Statement

if		Statement
if else
else		Statement
x ? y : z

switch		Statement
for		Statement
do		Statement
while		Statement

	Reseve Keyword Description:
auto		Storage class specifier

case		Statement
char		Type specifier

break		Statement
continue	Statement
default	Label

sizeof	Operator
typedef	Statement




	Character	Description
\n
\b	The backspace character; moves the cursor to the left one character.
\f	The form-feed character; goes to the top of a new page.
\r	The return character; returns to the beginning of the current line.
\t	The tab character; advances to the next tab stop.


	printf
%c	The character format specifier.
%d	The integer format specifier.
	%hd	short variables
	%ld	long variables
		for printing % use %%
אורך מינימלי
	%05d השלמת אפסים בהתחלה
	%5d מרחק מהתחלה אם קצר יותר
	%-5d יישור לשמאל
%i	The integer format specifier (same as %d).
%f	The floating-point format specifier.
	עובד גם על double
	%-10.2f		חותך את המספר העשרוני
%e	The scientific notation format specifier (note the lowercase e).
%E	The scientific notation format specifier (note the uppercase E).
%g	Uses %f or %e, whichever result is shorter.
%G	Uses %f or %E, whichever result is shorter.
%o	The unsigned octal format specifier.
%s	The string format specifier.
%u	The unsigned integer format specifier.
%x	The unsigned hexadecimal format specifier (note the lowercase x).
%X	The unsigned hexadecimal format specifier (note the uppercase X).
%p	Displays the corresponding argument that is a pointer.		-%p for pointer print
%n	Records the number of characters written so far.
%%	Outputs a percent sign (%).



	points, replace between ints
int swap_ints(int *first_number, int *second_number){
  int temp;
  /* temp = "what is pointed to by" first_number; etc... */
  temp = *first_number; 
 *first_number = *second_number;
 *second_number = temp;return 0;}
int main(){
  int a = 4, b = 7;
  printf("pre-swap values are: a == %d, b == %d\n", a, b)
  swap_ints(&a, &b);
  printf("post-swap values are: a == %d, b == %d\n", a, b)


  int i = 6;
  char c = 'a';
  void *the_data;
  the_data = &i;
  printf("the_data points to the integer value %d\n", *(int*) the_data);
  the_data = &c;
  printf("the_data now points to the character %c\n", *(char*) the_data);